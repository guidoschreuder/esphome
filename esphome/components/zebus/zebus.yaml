esphome:
  name: zebus
  friendly_name: Zebus Verwarming
  includes:
    - zebus.h
    - include/ebus-enums.h
    - include/telegram.h
    - include/telegram.cpp
    - include/ebus.h
    - include/ebus.cpp

esp32:
  board: esp32doit-devkit-v1
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: ""

ota:
  password: ""

wifi:
  ssid: !secret wifi_iot_ssid
  password: !secret wifi_iot_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Zebus Fallback Hotspot"
    password: !secret wifi_ap_fallback_password

captive_portal:

sensor:
  - platform: "custom"
    lambda: |-

      esphome::ebus::zebus_config_t zebus_config = {
        .interval_ms = 15000,
        .uart = {
          .num = 1,
          .pin_rx = 32,
          .pin_tx = 33,
        },
        .queues = {
          .history_size = 50,
          .command_size = 20,
        },
        .ebus = {
          .ebus_config = {
            .master_address = 0x00,
            .max_tries = 2,
            .max_lock_counter = 4,
          },
          .identification = {
            .device_name = "Zebus",
            .vendor_id = 0xDD,
            .software_version = 0x0002,
            .hardware_version = 0x0001,
          }
        }
      };

      auto zebus = new esphome::ebus::Zebus(zebus_config);
      App.register_component(zebus);

      return {
        zebus->water_pressure,
        zebus->flow_temp,
        zebus->return_temp,
        zebus->storage_temp,
        zebus->hot_water_heating,
        zebus->disp_room_temp,
      };

    sensors:
      - name: "Water Pressure"
        id: zebus_water_pressure
        device_class: "pressure"
        unit_of_measurement: bar
        state_class: "measurement"
        accuracy_decimals: 3
        internal: false
        filters:
          - clamp:
              min_value: 0
              max_value: 4
              ignore_out_of_range: true
          - median:
              window_size: 5
              send_every: 3
              send_first_at: 3
      - name: "Flow Temperature"
        id: zebus_flow_temperature
        device_class: "temperature"
        unit_of_measurement: "째C"
        state_class: "measurement"
        accuracy_decimals: 1
        internal: false
        filters:
          - median:
              window_size: 5
              send_every: 3
              send_first_at: 3
      - name: "Return Temperature"
        id: zebus_return_temperature
        device_class: "temperature"
        unit_of_measurement: "째C"
        state_class: "measurement"
        accuracy_decimals: 1
        internal: false
        filters:
          - median:
              window_size: 5
              send_every: 3
              send_first_at: 3
      - name: "Storage Temperature"
        id: zebus_storage_temperature
        device_class: "temperature"
        unit_of_measurement: "째C"
        state_class: "measurement"
        accuracy_decimals: 1
        internal: false
        filters:
          - median:
              window_size: 5
              send_every: 3
              send_first_at: 3
      - id: zebus_is_heating_measurement
        state_class: "measurement"
        internal: true
        filters:
          - median:
              window_size: 5
              send_every: 3
              send_first_at: 1
      - name: "Displayed Room Temperature"
        id: zebus_disp_room_temperature
        device_class: "temperature"
        unit_of_measurement: "째C"
        state_class: "measurement"
        accuracy_decimals: 1
        internal: false
        filters:
          - median:
              window_size: 5
              send_every: 3
              send_first_at: 3

  # Wifi signal sensors
  - platform: wifi_signal # Reports the WiFi signal strength/RSSI in dB
    name: "WiFi signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy # Reports the WiFi signal strength in %
    source_id: wifi_signal_db
    device_class: ""
    name: "WiFi signal"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"

binary_sensor:
  - platform: template
    name: "Water Heating"
    id: zebus_water_heating_bool
    lambda: !lambda |-
      return id(zebus_is_heating_measurement).state < .5;
